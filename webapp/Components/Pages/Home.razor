@page "/"
@rendermode InteractiveServer
@using BlazorApp.Services
@inject SimulationService SimulationService
@implements IDisposable

<PageTitle>Raiders vs Zombies</PageTitle>

<div class="main-container">
    <div class="content">

        <div class="title-container">
            <img src="images/brain.png" class="brain-image" alt="Brain" />
            <div class="title-text">
                <h1 class="page-title">Raiders vs Zombies</h1>
                <p class="subtitle">Watch the Tico Texas Tech Raiders desperate struggle for survival in this live feed!</p>
            </div>
            <img src="images/ttu-logo.png" class="ttu-logo" alt="TTU Logo" />
        </div>

        @if (isGameOver)
        {
            <div class="modal-overlay">
                <div class="modal-content game-over">
                    <div class="skull-icon">☠️</div>
                    <h2>Game Over!</h2>
                    <p>The Raiders survived for @daysSurvived days before succumbing to the zombie apocalypse.</p>
                    <button class="restart-btn" @onclick="CloseModal">Try Again</button>
                </div>
            </div>
        }

        <div class="simulation-view">
            <div class="feed-header">
                <div class="feed-title">
                    <div class="status-indicator"></div>
                    <h2>LIVE FEED</h2>
                    <span class="timestamp">@DateTime.Now.ToString("HH:mm:ss")</span>
                    <div class="playback-controls">
                        <button class="control-btn" title="Rewind" disabled>
                            <i class="fas fa-backward"></i>
                        </button>
                        @if (!isRunning)
                        {
                            <button class="control-btn play" @onclick="StartSimulation" title="Play">
                                <i class="fas fa-play"></i>
                            </button>
                        }
                        else
                        {
                            <button class="control-btn pause" @onclick="StopSimulation" title="Pause">
                                <i class="fas fa-pause"></i>
                            </button>
                        }
                        <button class="control-btn" title="Fast Forward" disabled>
                            <i class="fas fa-forward"></i>
                        </button>
                    </div>
                </div>
                <div class="feed-stats">
                    <div class="feed-stat">
                        <span class="label">SURVIVORS:</span>
                        <span class="value survivors">@stats.Survivors</span>
                    </div>
                    <div class="feed-stat">
                        <span class="label">ZOMBIES:</span>
                        <span class="value zombies">@stats.Zombies</span>
                    </div>
                    <div class="feed-stat">
                        <span class="label">DAY:</span>
                        <span class="value days">@daysSurvived</span>
                    </div>
                    <div class="feed-stat">
                        <span class="label">INFECTION:</span>
                        <span class="value infection">@stats.InfectionRate.ToString("0.0")%</span>
                    </div>
                    <div class="feed-stat">
                        <span class="label">FOOD:</span>
                        <span class="value food">@stats.Food</span>
                    </div>
                    <div class="feed-stat">
                        <span class="label">SANCTUARIES:</span>
                        <span class="value sanctuaries">@stats.Sanctuaries</span>
                    </div>
                </div>
            </div>
            <div class="simulation-container">
                <div class="vhs-overlay"></div>
                <div class="scanline"></div>
                @foreach (var entity in entities)
                {
                    <div @key="entity.Id" class="entity @entity.Type.ToLower()" style="left: @(entity.X)%; top: @(entity.Y)%;" title="@entity.Body">
                        <img src="@GetEntityImage(entity.Type)" alt="@entity.Type" />
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private bool isRunning;
    private bool isGameOver;
    private SimulationStats stats = new();
    private IEnumerable<EntityPosition> entities = Array.Empty<EntityPosition>();
    private int daysSurvived;

    protected override void OnInitialized()
    {
        SimulationService.OnSimulationUpdated += OnSimulationUpdated;
    }

    private async void OnSimulationUpdated()
    {
        stats = SimulationService.GetStats();
        entities = SimulationService.GetEntityPositions();
        daysSurvived++;

        // Check for game over condition
        if (stats.Survivors <= 0 && isRunning)
        {
            isGameOver = true;
            await StopSimulation();
        }

        await InvokeAsync(StateHasChanged);
    }

    private void StartSimulation()
    {
        isRunning = true;
        isGameOver = false;
        daysSurvived = 0;
        SimulationService.StartSimulation();
    }

    private async Task StopSimulation()
    {
        isRunning = false;
        SimulationService.StopSimulation();
    }

    private string GetEntityImage(string type) => type switch
    {
        "Human" => "images/human.png",
        "Zombie" => "images/zombie.png",
        "Food" => "images/food.png",
        "Sanctuary" => "images/sanctuary.png",
        _ => "images/unknown.png"
    };

    public void Dispose()
    {
        SimulationService.OnSimulationUpdated -= OnSimulationUpdated;
        SimulationService.Dispose();
    }

    public void CloseModal()
    {
        isGameOver = false;
    }
}

<style>

    p, h1, h2, h3, h4, h5, h6 { 
        margin: 0;
    }

    .main-container {
        width: 100%;
        height: 100%;
        background-color: #000000;
        color: #ffffff;
        display: flex;
        justify-content: center;
        align-items: center;
        text-align: center;
    }

    .title-container {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        position: relative;
    }

    .ttu-logo {
        width: 100px;
        height: auto;
        transform: rotate(15deg);
        z-index: 0;
        filter: drop-shadow(2px 2px 0 #000000) drop-shadow(4px 4px 0 #222222) drop-shadow(6px 6px 0 #000000);
    }

    .brain-image {
        width: 200px;
        height: auto;
        margin-right: -100px;
        transform: rotate(-15deg);
        z-index: 0;
        filter: drop-shadow(2px 2px 0 #000000) drop-shadow(4px 4px 0 #222222) drop-shadow(6px 6px 0 #000000);
    }

    .title-text {
        z-index: 2;
        display: flex;
        flex-direction: column;
    }

    .page-title {
        font-size: 8rem;
        color: #ff4444;
        font-weight: bold;
        margin: 0;
        text-shadow: 2px 2px 0 #000000, 4px 4px 0 #ff0000, 6px 6px 0 #800000;
    }

    .subtitle {
        font-size: 1.5rem;
        font-weight: light;
        color: #cccccc;
    }

    .content {
        width: 100%;
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .controls {
        display: flex;
        justify-content: center;
        gap: 1rem;
    }

    .start-btn, .stop-btn {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0.75rem 2rem;
        font-size: 1.2rem;
        border-radius: 8px;
        border: none;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .start-btn {
        background-color: #ff4444;
        color: #000000;
    }

    .stop-btn {
        background-color: #ff4444;
        color: #ffffff;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1.5rem;
    }

    .stat-card {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        background-color: #1a1a1a;
        border-radius: 8px;
        padding: 1rem;
    }

    .stat-title {
        font-size: 1rem;
        color: #999999;
    }

    .stat-value {
        font-size: 4rem;
        font-weight: bold;
    }

    .survivors { color: #44ff44; }
    .zombies { color: #ff4444; }
    .days { color: #4444ff; }
    .infection { color: #ffff44; }

    .simulation-view {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        padding: 1rem;
        background-color: #0a0a0a;
        border: 1px solid #333333;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
    }

    .feed-header {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        padding: 0.5rem;
        background-color: #151515;
        border-radius: 4px;
    }

    .feed-title {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 0.5rem;
    }

    .status-indicator {
        width: 12px;
        height: 12px;
        background-color: #ff0000;
        border-radius: 50%;
        animation: blink 1.5s infinite;
    }

    .feed-title h2 {
        color: #ffffff;
        font-family: 'Courier New', monospace;
        font-size: 1.25rem;
        font-weight: bold;
        letter-spacing: 2px;
        margin: 0;
    }

    .timestamp {
        color: #666666;
        font-family: 'Courier New', monospace;
        font-size: 0.9rem;
        margin-left: 0;
        margin-right: 1rem;
    }

    .feed-stats {
        display: grid;
        grid-template-columns: repeat(6, 1fr);
        gap: 1rem;
        padding: 0.75rem;
        background-color: #1a1a1a;
        border-radius: 4px;
        font-family: 'Courier New', monospace;
    }

    .feed-stat {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.25rem;
    }

    .feed-stat .label {
        color: #666666;
        font-size: 0.8rem;
        font-weight: bold;
    }

    .feed-stat .value {
        font-size: 1.5rem;
        font-weight: bold;
    }

    .simulation-container {
        aspect-ratio: 16 / 9;
        background-color: #90C290;
        background-image: url('images/background.png');
        background-size: cover;
        border-radius: 4px;
        position: relative;
        overflow: hidden;
        border: 2px solid #333333;
        box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.3);
        animation: vhs-flicker 0.2s infinite;
    }

    .vhs-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: repeating-linear-gradient(
            transparent 0%,
            rgba(255, 255, 255, 0.05) 0.5%,
            transparent 1%
        );
        pointer-events: none;
        z-index: 10;
        animation: vhs-move 10s linear infinite;
    }

    .scanline {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 2px;
        background: rgba(255, 255, 255, 0.1);
        pointer-events: none;
        z-index: 11;
        animation: scanline 6s linear infinite;
    }

    .entity {
        position: absolute;
        transform: translate(-50%, -50%);
        will-change: transform;
        transition: left 0.3s ease, top 0.3s ease;
    }

    .entity img {
        width: 45px;
        height: 45px;
        object-fit: contain;
    }

    .entity.sanctuary img {
        width: 120px;
        height: 120px;
    }
    
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        animation: fadeIn 0.3s ease-out;
    }

    .modal-content {
        animation: slideIn 0.3s ease-out;
    }

    .game-over {
        background: linear-gradient(135deg, #660000 0%, #990000 100%);
        color: white;
        padding: 3rem;
        border-radius: 12px;
        text-align: center;
        box-shadow: 0 0 30px rgba(255, 0, 0, 0.3),
                    0 0 60px rgba(255, 0, 0, 0.2);
        border: 2px solid #ff0000;
        max-width: 500px;
        width: 90%;
    }

    .skull-icon {
        font-size: 4rem;
        margin-bottom: 1rem;
        animation: bounce 1s infinite;
    }

    .game-over h2 {
        font-size: 3rem;
        margin-bottom: 1rem;
        text-shadow: 2px 2px 0 #000000;
        color: #ffffff;
    }

    .game-over p {
        font-size: 1.5rem;
        margin-bottom: 2rem;
        text-shadow: 1px 1px 0 #000000;
        color: #ffcccc;
    }

    .restart-btn {
        background-color: #ffffff;
        color: #990000;
        border: none;
        padding: 1rem 2rem;
        font-size: 1.2rem;
        border-radius: 8px;
        cursor: pointer;
        font-weight: bold;
        transition: all 0.2s ease;
        text-transform: uppercase;
    }

    .restart-btn:hover {
        background-color: #ffcccc;
        transform: scale(1.05);
    }

    .playback-controls {
        display: flex;
        gap: 0.5rem;
        margin-left: auto;
    }

    .control-btn {
        background: none;
        border: none;
        color: #666666;
        font-size: 1.2rem;
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 50%;
        width: 36px;
        height: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
    }

    .control-btn:not([disabled]):hover {
        background-color: rgba(255, 255, 255, 0.1);
        color: #ffffff;
    }

    .control-btn[disabled] {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .control-btn.play {
        color: #44ff44;
    }

    .control-btn.pause {
        color: #ff4444;
    }
</style>